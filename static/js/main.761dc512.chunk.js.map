{"version":3,"sources":["components/Action/Action.js","components/AddOption/AddOption.js","components/Header/Header.js","components/Option/Option.js","components/Options/Options.js","components/Modals/OptionModal.js","components/Modals/RemoveAllModal.js","App.js","reportWebVitals.js","index.js"],"names":["Action","hasOptions","openRemoveModal","handlePickOption","className","onClick","disabled","AddOption","options","setOptions","error","setError","optionRef","useRef","onSubmit","e","preventDefault","option","current","value","trim","map","o","toLowerCase","includes","onBlur","type","ref","placeholder","Header","title","subtitle","defaultProps","Option","optionText","deleteOption","count","Options","optionItems","index","length","OptionModal","pickedOption","closeModal","isOpen","ariaHideApp","contentLabel","onRequestClose","closeTimeoutMS","style","overlay","backgroundColor","RemoveAllModal","removeAllOptions","closeRemoveModal","App","optionsLocal","JSON","parse","localStorage","getItem","useState","undefined","setPickedOption","setIsOpen","useEffect","setItem","stringify","Math","floor","random","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.761dc512.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Action = ({\r\n  hasOptions,\r\n  openRemoveModal,\r\n  handlePickOption,\r\n\r\n}) => (\r\n  <div>\r\n    <button\r\n      className=\"big-button\"\r\n      onClick={handlePickOption}\r\n      disabled={!hasOptions}\r\n    >\r\n      What should I do?\r\n    </button>\r\n    <div className='widget-header'>\r\n      <h3 className='widget-header__title'>{hasOptions ? \"You have these options:\" : \"No options\"}</h3>\r\n      {hasOptions && <button onClick={openRemoveModal} className='button button--link'>Remove all</button>}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Action;\r\n","import React, { useRef} from \"react\";\r\n\r\nconst AddOption = ({ options, setOptions, error, setError }) => {\r\n  const optionRef = useRef();\r\n\r\n  const handleAddOption = (e) => {\r\n    e.preventDefault();\r\n    //* const option = e.target.elements.option.value(если в <input  аттрибут name='option' ) === optionRef.current.value ( если в <input используется useRef())\r\n    const option = optionRef.current.value.trim();\r\n\r\n    if (!option) {\r\n      setError(\"This is not a valid option!\");\r\n    } else if (options.map(o => o.toLowerCase()).includes(option.toLowerCase())) {\r\n      setError(\"This option already exists!\");\r\n    } else {\r\n      setOptions([...options, option]);\r\n      optionRef.current.value = '';\r\n      setError(null)\r\n    }\r\n\r\n  };\r\n\r\n  const clearErrorMessage = () => setError(null)\r\n\r\n  return (\r\n    <div>\r\n      {error && <p className=\"add-option-error\">{error}</p>}\r\n      <form className='form' onSubmit={handleAddOption} onBlur={clearErrorMessage} >\r\n        <input className='form__input' type=\"text\" ref={optionRef} placeholder=\"New option\" />\r\n        <button className='button'>Add Option</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddOption;\r\n","import React from \"react\";\r\n\r\nconst Header = ({ title, subtitle }) => (\r\n  <div className=\"header\">\r\n    <div className=\"container\">\r\n      <h1 className=\"header__title\">{title}</h1>\r\n      {subtitle && <h2 className=\"header__subtitle\">{subtitle}</h2>}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nHeader.defaultProps = {\r\n  title: \"Indecision App\",\r\n  subtitle: \"Let computer decide for you!\",\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Option = ({ optionText, deleteOption, count }) => (\r\n  <li className='option'>\r\n    <p className='option__text'>{count}. {optionText}</p>\r\n    <button className=\"button--cross\" onClick={() => deleteOption(optionText)}>\r\n     &times;\r\n    </button>\r\n  </li>\r\n)\r\n\r\nexport default Option;\r\n","import React from \"react\";\r\nimport Option from \"../Option/Option\";\r\n\r\nconst Options = ({ options, deleteOption }) => {\r\n\r\n  const optionItems = options.map((option, index) => <Option\r\n    key={option}\r\n    optionText={option}\r\n    deleteOption={deleteOption}\r\n    count={index + 1}\r\n    />)\r\n\r\n\r\n  return (\r\n    <>\r\n      {options.length === 0 && <p className='widget__message'>Please add an option to get started!</p>}\r\n      <ol className='list'>{optionItems}</ol>\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default Options;\r\n","import React from \"react\";\r\nimport Modal from \"react-modal\";\r\n\r\nconst OptionModal = ({ pickedOption, closeModal }) => (\r\n  <Modal\r\n    isOpen={!!pickedOption}\r\n    ariaHideApp={false}\r\n    contentLabel=\"Selected option\"\r\n    onRequestClose={closeModal}\r\n    closeTimeoutMS={300}\r\n    className='modal'\r\n    style={{\r\n      overlay: {\r\n        backgroundColor: 'rgba(128, 128, 128, 0.85)'\r\n      },\r\n    }}\r\n  >\r\n    <h3 className='modal__title'>Try this option:</h3>\r\n    {pickedOption && <p className='modal__body'>{pickedOption}</p>}\r\n    <button onClick={closeModal} className='button'>Got it!</button>\r\n  </Modal>\r\n  //todo if pickedOption=some value, то !!pickedOption ===true\r\n  //todo if pickedOption=undefined, то !!pickeOption ===false\r\n);\r\n\r\nexport default OptionModal;\r\n","import React from \"react\";\r\nimport Modal from \"react-modal\";\r\n\r\nconst RemoveAllModal = ({ isOpen, removeAllOptions, closeRemoveModal }) => (\r\n  <Modal\r\n    isOpen={isOpen}\r\n    ariaHideApp={false}\r\n    contentLabel=\"Remove All\"\r\n    onRequestClose={closeRemoveModal}\r\n    closeTimeoutMS={300}\r\n    className='modal'\r\n    style={{\r\n      overlay: {\r\n        backgroundColor: 'rgba(128, 128, 128, 0.85)'\r\n      },\r\n    }}\r\n  >\r\n    <h3 className='modal__title'>This will remove all options. Are you sure?</h3>\r\n    <div className='buttons__center'>\r\n    <button onClick={removeAllOptions} className='button'>Confirm</button>\r\n    <button onClick={closeRemoveModal} className='button'>Cancel</button>\r\n    </div>\r\n  </Modal>\r\n  \r\n);\r\n\r\nexport default RemoveAllModal;\r\n","import React, { useEffect, useState } from \"react\";\nimport Action from \"./components/Action/Action\";\nimport AddOption from \"./components/AddOption/AddOption\";\nimport Header from \"./components/Header/Header\";\nimport Options from \"./components/Options/Options\";\nimport OptionModal from \"./components/Modals/OptionModal\";\nimport RemoveAllModal from \"./components/Modals/RemoveAllModal\";\n\nfunction App() {\n  // localStorage.clear()\n\n  const optionsLocal = JSON.parse(localStorage.getItem(\"options\")) || [];\n  const [options, setOptions] = useState(optionsLocal);\n  //todo reading data from localStorage\n\n  const [pickedOption, setPickedOption] = useState(undefined);\n  //todo reading data from localStorage\n\n  const [error, setError] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const removeAllOptions = () => {\n    setOptions([])\n    setError(null)\n    setIsOpen(false)\n  };\n  const handlePickOption = () => setPickedOption(options[Math.floor(Math.random() * options.length)]);\n\n  const deleteOption = (option) => setOptions(options.filter((o) => o !== option));\n\n  const openRemoveModal = () => setIsOpen(true);\n\n  const closeRemoveModal = () => setIsOpen(false);\n\n  const closeModal = () => setPickedOption(undefined);\n\n  useEffect(() => {\n    localStorage.setItem(\"options\", JSON.stringify(options));\n    localStorage.setItem(\"pickedOption\", JSON.stringify(pickedOption));\n    //todo saving data to localStorage\n  }, [options, pickedOption]);\n\n  return (\n    <div className=\"app\">\n\n      <OptionModal\n        pickedOption={pickedOption}\n        closeModal={closeModal}\n      />\n      <RemoveAllModal\n        isOpen={isOpen}\n        removeAllOptions={removeAllOptions}\n        closeRemoveModal={closeRemoveModal}\n      />\n      <Header />\n      <div className=\"container\">\n        <Action\n          hasOptions={options.length > 0}\n          openRemoveModal={openRemoveModal}\n          handlePickOption={handlePickOption}\n        />\n        <div className=\"widget\">\n          <Options\n            hasOptions={options.length > 0}\n            options={options}\n            deleteOption={deleteOption}\n          />\n          <AddOption\n            options={options}\n            setOptions={setOptions}\n            error={error}\n            setError={setError}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n//!LocalStorage only works with string data!!!! key-value === strings\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/styles.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}